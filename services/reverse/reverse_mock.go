// Code generated by MockGen. DO NOT EDIT.
// Source: services/reverse/reverse.go
//
// Generated by this command:
//
//	mockgen -source services/reverse/reverse.go -destination=services/reverse/reverse_mock.go -mock_names Interface=MockReverseClient -package=reverse
//

// Package reverse is a generated GoMock package.
package reverse

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockReverseClient is a mock of Interface interface.
type MockReverseClient struct {
	ctrl     *gomock.Controller
	recorder *MockReverseClientMockRecorder
}

// MockReverseClientMockRecorder is the mock recorder for MockReverseClient.
type MockReverseClientMockRecorder struct {
	mock *MockReverseClient
}

// NewMockReverseClient creates a new mock instance.
func NewMockReverseClient(ctrl *gomock.Controller) *MockReverseClient {
	mock := &MockReverseClient{ctrl: ctrl}
	mock.recorder = &MockReverseClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReverseClient) EXPECT() *MockReverseClientMockRecorder {
	return m.recorder
}

// GetBatch mocks base method.
func (m *MockReverseClient) GetBatch(request BatchReverseRequest) ([]Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatch", request)
	ret0, _ := ret[0].([]Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatch indicates an expected call of GetBatch.
func (mr *MockReverseClientMockRecorder) GetBatch(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatch", reflect.TypeOf((*MockReverseClient)(nil).GetBatch), request)
}

// GetBatchDisplayName mocks base method.
func (m *MockReverseClient) GetBatchDisplayName(request BatchReverseRequest) ([]ResultWithDisplayName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchDisplayName", request)
	ret0, _ := ret[0].([]ResultWithDisplayName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchDisplayName indicates an expected call of GetBatchDisplayName.
func (mr *MockReverseClientMockRecorder) GetBatchDisplayName(request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchDisplayName", reflect.TypeOf((*MockReverseClient)(nil).GetBatchDisplayName), request)
}

// GetBatchDisplayNameWithContext mocks base method.
func (m *MockReverseClient) GetBatchDisplayNameWithContext(ctx context.Context, request BatchReverseRequest) ([]ResultWithDisplayName, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchDisplayNameWithContext", ctx, request)
	ret0, _ := ret[0].([]ResultWithDisplayName)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchDisplayNameWithContext indicates an expected call of GetBatchDisplayNameWithContext.
func (mr *MockReverseClientMockRecorder) GetBatchDisplayNameWithContext(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchDisplayNameWithContext", reflect.TypeOf((*MockReverseClient)(nil).GetBatchDisplayNameWithContext), ctx, request)
}

// GetBatchWithContext mocks base method.
func (m *MockReverseClient) GetBatchWithContext(ctx context.Context, request BatchReverseRequest) ([]Result, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBatchWithContext", ctx, request)
	ret0, _ := ret[0].([]Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBatchWithContext indicates an expected call of GetBatchWithContext.
func (mr *MockReverseClientMockRecorder) GetBatchWithContext(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBatchWithContext", reflect.TypeOf((*MockReverseClient)(nil).GetBatchWithContext), ctx, request)
}

// GetComponents mocks base method.
func (m *MockReverseClient) GetComponents(lat, lon float64, options CallOptions) ([]Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponents", lat, lon, options)
	ret0, _ := ret[0].([]Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponents indicates an expected call of GetComponents.
func (mr *MockReverseClientMockRecorder) GetComponents(lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponents", reflect.TypeOf((*MockReverseClient)(nil).GetComponents), lat, lon, options)
}

// GetComponentsWithContext mocks base method.
func (m *MockReverseClient) GetComponentsWithContext(ctx context.Context, lat, lon float64, options CallOptions) ([]Component, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetComponentsWithContext", ctx, lat, lon, options)
	ret0, _ := ret[0].([]Component)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetComponentsWithContext indicates an expected call of GetComponentsWithContext.
func (mr *MockReverseClientMockRecorder) GetComponentsWithContext(ctx, lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetComponentsWithContext", reflect.TypeOf((*MockReverseClient)(nil).GetComponentsWithContext), ctx, lat, lon, options)
}

// GetDisplayName mocks base method.
func (m *MockReverseClient) GetDisplayName(lat, lon float64, options CallOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisplayName", lat, lon, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisplayName indicates an expected call of GetDisplayName.
func (mr *MockReverseClientMockRecorder) GetDisplayName(lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisplayName", reflect.TypeOf((*MockReverseClient)(nil).GetDisplayName), lat, lon, options)
}

// GetDisplayNameWithContext mocks base method.
func (m *MockReverseClient) GetDisplayNameWithContext(ctx context.Context, lat, lon float64, options CallOptions) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDisplayNameWithContext", ctx, lat, lon, options)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDisplayNameWithContext indicates an expected call of GetDisplayNameWithContext.
func (mr *MockReverseClientMockRecorder) GetDisplayNameWithContext(ctx, lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDisplayNameWithContext", reflect.TypeOf((*MockReverseClient)(nil).GetDisplayNameWithContext), ctx, lat, lon, options)
}

// GetFrequent mocks base method.
func (m *MockReverseClient) GetFrequent(lat, lon float64, options CallOptions) (FrequentAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrequent", lat, lon, options)
	ret0, _ := ret[0].(FrequentAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrequent indicates an expected call of GetFrequent.
func (mr *MockReverseClientMockRecorder) GetFrequent(lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrequent", reflect.TypeOf((*MockReverseClient)(nil).GetFrequent), lat, lon, options)
}

// GetFrequentWithContext mocks base method.
func (m *MockReverseClient) GetFrequentWithContext(ctx context.Context, lat, lon float64, options CallOptions) (FrequentAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFrequentWithContext", ctx, lat, lon, options)
	ret0, _ := ret[0].(FrequentAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFrequentWithContext indicates an expected call of GetFrequentWithContext.
func (mr *MockReverseClientMockRecorder) GetFrequentWithContext(ctx, lat, lon, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFrequentWithContext", reflect.TypeOf((*MockReverseClient)(nil).GetFrequentWithContext), ctx, lat, lon, options)
}
